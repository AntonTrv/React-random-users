{"version":3,"sources":["components/AddUsers.js","components/User.js","components/ListOfUsers.js","components/MoreButton.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["AddUsers","_ref","handleClick","react_default","a","createElement","className","onClick","User","cell","picture","name","location","email","nat","src","medium","alt","first","last","city","ListOfUsers","data","map","user","i","components_User","Object","assign","key","MoreButton","clear","Header","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","users","error","getUsers","bind","assertThisInitialized","clearUsers","_this2","fetch","then","respond","json","setState","concat","toConsumableArray","results","catch","isLoading","_this$state","components_Header","components_AddUsers","components_ListOfUsers","length","components_MoreButton","style","margin","display","justifyContent","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8976640.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../scss/addUsersButton.scss'\n\nconst AddUsers = ({handleClick}) =>\n<div className='addUsers-wrapper'>\n<h2>Meet our users!</h2>\n<button onClick={handleClick}><span>show</span></button>\n</div>\n\nAddUsers.propTypes = {\n  handleClick: PropTypes.func\n}\n\nexport default AddUsers\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../scss/user.scss'\n\n\nconst User = ({cell, picture, name, location, email, nat}) =>\n<section className=\"user\">\n<img src={picture.medium} alt=\"\"/>\n<h2>{name.first} {name.last}</h2>\n<span className=\"location\">{location.city}, {nat}</span>\n<span>{email}</span>\n<span>{cell}</span>\n</section>\n\nUser.propTypes = {\n  cell: PropTypes.string,\n  picture: PropTypes.object,\n  name: PropTypes.object,\n  location: PropTypes.object,\n  email: PropTypes.string,\n  nat: PropTypes.string\n}\n\nexport default User\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport User from './User'\nimport '../scss/listOfUsers.scss'\n\nconst ListOfUsers = ({data}) =>\n<div className=\"listOfUsers-wrapper\">\n{data.map((user,i)=>\n<User key={i} {...user}/>)}\n</div>\n\nListOfUsers.propTypes ={\n  data: PropTypes.array\n}\n\nexport default ListOfUsers;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../scss/moreButton.scss'\n\nconst MoreButton = ({handleClick, clear}) =>\n<div className='more-clear'>\n<button onClick={handleClick}><span>more</span></button>\n<button onClick={clear}><span>clear</span></button>\n</div>\n\nMoreButton.propTypes ={\n  handleClick: PropTypes.func,\n  clear: PropTypes.func\n}\n\nexport default MoreButton;\n","import React from 'react'\nimport '../scss/header.scss'\n\nconst Header = () =>\n<div className=\"header\"></div>\n\nexport default Header;\n","import React from 'react'\nimport AddUsers from './components/AddUsers'\nimport ListOfUsers from './components/ListOfUsers'\nimport MoreButton from './components/MoreButton'\nimport Header from './components/Header'\nimport './scss/App.scss'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      users: [],\n      error:false\n    }\n\n    this.getUsers = this.getUsers.bind(this)\n    this.clearUsers = this.clearUsers.bind(this)\n  }\n\n\n  getUsers() {\n    const url = 'https://randomuser.me/api/?results=6';\n    fetch(url)\n    .then((respond)=>respond.json())\n    .then((data)=> this.setState({users: [...this.state.users, ...data.results]}))\n    .catch(error => this.setState({ error, isLoading: false }));\n    this.setState({loading:true})\n\n  }\n\n  clearUsers() {\n    this.setState({users: [],error:false})\n  }\n\n\n  componentDidMount(){\n    this.setState({loading: false})\n  }\n\n    render() {\n      const {users,error} = this.state\n      const getUsers =this.getUsers\n      const clearUsers = this.clearUsers\n      return(\n\n        <div className='app'>\n          <Header/>\n          <AddUsers handleClick={getUsers}/>\n          <ListOfUsers data={users}/>\n          {users.length ? <MoreButton handleClick={getUsers} clear={clearUsers}/> : ''}\n          {error ? <h2 style={{margin:'auto', display:'flex', justifyContent:'center'}}>Error</h2> : ''}\n        </div>\n\n      )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}